const hre = require("hardhat");


async function main() {
  const currentTimestampInSeconds = Math.round(Date.now() / 1000);
  const unlockTime = currentTimestampInSeconds + 60;

  const lockedAmount = hre.ethers.parseEther("0.001");

  const hello = await hre.ethers.deployContract("Hello", [unlockTime], {
    value: lockedAmount,
  });


  await hello.waitForDeployment();

  console.log(
    `Lock with ${ethers.formatEther(
      lockedAmount
    )}ETH and unlock timestamp ${unlockTime} deployed to ${hello.target}`
  );
}



// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});


//	const [deployer] = await ethers.getSigners();

//  console.log("Deploying contracts with the account:", deployer.address);
//  console.log("Account balance:", (await deployer.getBalance()).toString());

  
  // Get the ContractFactories and Signers here.
//  const Hello  = await ethers.getContractFactory("Hello");
  // deploy contracts
//  const HelloTwo = await Hello.deploy(1);

//  await HelloTwo.waitForDeployment();

//  console.log(
//    `Lock with ${ethers.formatEther(
//      lockedAmount
//    )}ETH and unlock timestamp ${unlockTime} deployed to ${HelloTwo.target}`
//  );






//}
